bootstrap.
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Food Blog</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <!-- Header Section -->
    <header>
        <nav class="navbar navbar-expand-lg navbar-light bg-light">
            <div class="container-fluid">
                <a class="navbar-brand" href="#">My Food Blog</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav">
                        <li class="nav-item"><a class="nav-link" href="#about-me">About Me</a></li>
                        <li class="nav-item"><a class="nav-link" href="#latest-posts">Latest Posts</a></li>
                        <li class="nav-item"><a class="nav-link" href="#popular-recipes">Popular Recipes</a></li>
                        <li class="nav-item"><a class="nav-link" href="#contact-subscribe">Contact & Subscribe</a></li>
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <!-- Main Content -->
    <main class="container mt-4">
        <!-- About Me Section -->
        <section id="about-me" class="mb-5">
            <h2>About Me</h2>
            <div class="row">
                <div class="col-md-6">
                    <p>Hi, I am a passionate food enthusiast who loves exploring and sharing delightful recipes. Cooking is my art, and this blog is my canvas. Join me in discovering the joys of creating delicious meals!</p>
                </div>
                <div class="col-md-6">
                    <img src="about-me.jpg" alt="About Me" class="img-fluid rounded">
                </div>
            </div>
        </section>

        <!-- Latest Posts Section -->
        <section id="latest-posts" class="mb-5">
            <h2>Latest Posts</h2>
            <div class="row">
                <div class="col-md-4">
                    <div class="card">
                        <img src="salad.jpg" class="card-img-top" alt="Healthy Salads">
                        <div class="card-body">
                            <h5 class="card-title">Healthy Salads for Every Day</h5>
                            <p class="card-text">Discover how to make delicious and nutritious salads easily.</p>
                            <a href="salad-recipes.html" class="btn btn-primary">Read more</a>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card">
                        <img src="comfort-food.jpg" class="card-img-top" alt="Comfort Foods">
                        <div class="card-body">
                            <h5 class="card-title">Comfort Foods to Warm Your Soul</h5>
                            <p class="card-text">Explore heartwarming recipes perfect for cozy evenings.</p>
                            <a href="comfort-foods.html" class="btn btn-primary">Read more</a>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- Popular Recipes Section -->
        <section id="popular-recipes" class="mb-5">
            <h2>Popular Recipes</h2>
            <div class="row">
                <div class="col-md-4">
                    <div class="card">
                        <img src="lasagna.jpg" class="card-img-top" alt="Lasagna">
                        <div class="card-body">
                            <h5 class="card-title">Classic Lasagna</h5>
                            <a href="recipe1.html" class="btn btn-primary">View Recipe</a>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card">
                        <img src="pizza.jpg" class="card-img-top" alt="Pizza">
                        <div class="card-body">
                            <h5 class="card-title">Homemade Pizza</h5>
                            <a href="recipe2.html" class="btn btn-primary">View Recipe</a>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card">
                        <img src="brownies.jpg" class="card-img-top" alt="Brownies">
                        <div class="card-body">
                            <h5 class="card-title">Chocolate Brownies</h5>
                            <a href="recipe3.html" class="btn btn-primary">View Recipe</a>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- Contact and Subscription Section -->
        <section id="contact-subscribe" class="mb-5">
            <h2>Contact & Subscribe</h2>
            <p>Feel free to <a href="mailto:author@foodblog.com">email me</a> for any inquiries or collaborations.</p>
            <form>
                <div class="mb-3">
                    <label for="name" class="form-label">Name</label>
                    <input type="text" class="form-control" id="name" name="name" required>
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email</label>
                    <input type="email" class="form-control" id="email" name="email" required>
                </div>
                <button type="submit" class="btn btn-primary">Subscribe</button>
            </form>
        </section>
    </main>

    <!-- Footer Section -->
    <footer class="bg-light text-center py-3">
        <p>&copy; 2025 My Food Blog. All rights reserved.</p>
    </footer>
</body>
</html>



5a.
function swap(input) {
  let swapped = "";
  for (let c of input) {
    if (c === c.toLowerCase()) swapped += c.toUpperCase();
    else if (c === c.toUpperCase()) swapped += c.toLowerCase();
    else swapped += c;
  }
  return swapped
}
const readline = require("readline");
const r1 = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

r1.question("enter String : ", (data) => {
  console.log(swap(data));
  r1.close()
});



5b.
function mostFreq(arr) {
    if (arr.length ==0) return null;
    const freq = new Map();
    let mostFreq = arr[0];
    for (const item of arr) {
        freq.set(item,(freq.get(item)||0)+1);
        if(freq.get(item)>freq.get(mostFreq)) {
            mostFreq = item;
        }
    }
    return mostFreq
}
const arr = [1, 2, 3, 2, 4, 5, 2, 3, 3, 3];
console.log(mostFreq(arr))



5c.
function removeDuplicates(arr) {
    return [...new Set(arr)];
}
const array = [1, 2, 2, 3, 4, 4, 5];
console.log(removeDuplicates(array)); 


6a.
function binary(arr,tar) {
    let low =0;
    let high = arr.length-1;
    while(low<=high) {
        let middle = low + Math.floor((high - low) / 2);
        if(arr[middle] === tar) return middle;
        else if(tar>arr[middle]) low=middle+1;
        else high = middle-1;
    }
    return -1;
}
let numbers = [1, 3, 5, 7, 9, 11];
console.log("Binary Search : " + binary(numbers, 7));


6b.
function prop(obj) {
    return Object.keys(obj);
}
const obj = { name: "John", age: 30, city: "New York" };
console.log("The list properties are : " + prop(obj));

6c.
function prop(obj,name) {
    return Object.hasOwn(obj,name)?true:false;
}
const obj = { name: "John", age: 30, city: "New York" };
console.log(prop(obj,"age"));
console.log(prop(obj,"tankbund"));


6d.
function quickSort(arr) {
  if (arr.length <= 1) return arr;
  const pivot = arr[0];
  const left = arr.slice(1).filter((x) => x < pivot);
  const right = arr.slice(1).filter((x) => x >= pivot);
  return [...quickSort(left), pivot, ...quickSort(right)];
}
let unsortedArray = [3, 6, 8, 10, 2, 1];
console.log("Quick Sort : " + quickSort(unsortedArray));



7a.
class users {
    constructor() {
        this.users = new Map();
    }
    userRegister(username,password) {
        if(this.users.has(username)) return "user Already exists";
        else {
            this.users.set(username,password)
            return "Successfully user registered";
        }
    }
    deleteUser(username) {
        if(!this.users.has(username)) return "user dosent exists";
        else {
            this.users.delete(username)
            return "Successfully user deleted";
        }
    }
    updateUserPass(username,password) {
        if(!this.users.has(username)) return "user dosent exists";
        else {
            this.users.set(username,password)
            return "Successfully user upadted";
        }
    }
    authUser(username,password) {
        if(!this.users.has(username)) return "user dosent exists";
        else {
            if(password === this.users.get(username)) return "User Authenticated successfully";
            else return "Wrong password!";
        }
    }
    list() {
        return [...this.users.keys()];
    }
}
const auth = new users();
console.log(auth.userRegister("user1", "password1"));
console.log(auth.userRegister("user2", "password2"));
console.log(auth.deleteUser("user1"));
console.log(auth.updateUserPass("user2", "newpassword2"));
console.log(auth.authUser("user2", "newpassword2"));
console.log(auth.list());



7b.
function bubble(arr) {
    for(let i=0;i<arr.length;i++) {
        for(let j=0;j<arr.length-1-i;j++) {
            if(arr[j]>arr[j+1]) {
                [arr[j],arr[j+1]] =[arr[j+1],arr[j]]
            }
        }
    }
    return arr
}
const arr = [101,1,121,3,13];
console.log(bubble(arr));


8a.
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Document</title>
  </head>
  <body>
    <div id="table-content"></div>
    <script>
      const jsonData = [
        { id: 1, name: "John Doe", age: 28, email: "john.doe@example.com" },
        { id: 2, name: "Jane Smith", age: 34, email: "jane.smith@example.com" },
        { id: 3, name: "Samuel Johnson", age: 25, email: "samuel.johnson@example.com" },
      ];
      function createTable(data) {
        let table = "<table border='1'><tr>";
        for (let key in data[0]) table += `<th>${key}</th>`;
        table += "</tr>";
        data.forEach((row) => {
          table += "<tr>";
          for (let key in row) table += `<td>${row[key]}</td>`;
          table += "</tr>";
        });
        table += "</table>";
        document.getElementById("table-content").innerHTML = table;
      }
      createTable(jsonData);
    </script>
  </body>
</html>




8b.
function register(username) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      if (username != "") {
        console.log(`user ${username} registered successfully`);
        resolve(username);
      } else reject(`Failed to register user ${username}`);
    }, 1000);
  });
}

function sendEmail(username) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      if (username) resolve(`Email sent to user ${username}`);
      else reject(`Cant send email to user ${username}`);
    }, 2000);
  });
}

async function regAndEmail(username) {
  try {
    const username_2 = await register(username);
    const message = await sendEmail(username_2);
    return console.log(message);
  } catch (err) {
    return console.log(err);
  }
}

function multiple(users) {
  const promises = users.map((user) => {
    return regAndEmail(user);
  });
  Promise.all(promises)
    .then(()=>console.log("All users successfully Registered"))
    .catch((err) => console.log(err));
}

regAndEmail("prasad");
regAndEmail("prasad1");
const users = ["Ramesh", "suresh", "ganesh"];
multiple(users)


9a.
import http from "http";
import readline from "readline";
const r1 = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});
r1.question("Enter port Number : ", (port) => {
  const portNo = parseInt(port);
  if (isNaN(portNo) || portNo < 0 || portNo > 65535) {
    console.log("Invalid porn Number");
    r1.close();
  }
  else {
    const server = http.createServer((req,res)=> {
        res.writeHead(200,{'content-type':'text/plain'});
        res.end("Hello");
    })
    server.listen(portNo);
  }
});



9b.
import fs from 'fs'
import path from 'path'
const __dirname = path.resolve()
fs.readFile(path.join(__dirname,'index.html'),'utf-8',(err,data)=> {
    if(err) console.log(err);
    else console.log(data);
})


9c.
import readline from 'readline'
import fs from 'fs'
const r1 = readline.createInterface({
    input:process.stdin,
    output:process.stdout
})
r1.question("Enter file name : ",file=> {
    r1.question("Enter text to append : ",text=> {
        fs.appendFile(file,text,(err)=> {
            if(err) console.log(err);
            else console.log("Text appended successfully");
        })
        r1.close();
    })
})


10a.
use mydb
db.collection.insertMany([{},{}])


10b.


12.
function vowLen(data) {
    const vowels = "AEIOUaeiou"
    return data.split("").filter(x=> vowels.includes(x)).length;
}
const data = "hello";
const len = data.length;
const vowlen = vowLen(data);
console.log(`Vowels : ${vowlen} Non vowels Len: ${len-vowlen}`)

13.

function merge(arr1,arr2) {
    return [...arr1,...arr2].sort();
}
const arr1 = [1,2]
const arr2=[3,4,1];
console.log(merge(arr1,arr2));


14.
let library = [
    {title: "The Great Gatsby", author: "Francis Scott Fitzgerald", libraryId: 1,}, 
    { title: "The Catcher in the Rye", author: "J. D. Salinger", libraryId: 2, }, 
    { title: "The Grapes of Wrath", author: "John Steinbeck, Robert DeMott", libraryId: 3,},
    ];
const book = library.find(row=>row.libraryId===2);
if(book) {
    console.log(book.author+book.title+" is avaliable");
}
else {
    console.log("book is unavaliable");
}


15.
const users = [
    { name: 'Alice', age: 21 },
    { name: 'Bob', age: 22 },
    { name: 'Charlie', age: 21 },
    { name: 'David', age: 22 },
    { name: 'Eve', age: 23 },
    { name: 'Frank', age: 21 },
    { name: 'Grace', age: 23 },
    { name: 'Hank', age: 24 },
    { name: 'Ivy', age: 22 }
    ];

console.log(users.map(user=>user.name) +"")

16.
const users = [
    { name: 'Alice', age: 17 },
    { name: 'Bob', age: 20 },
    { name: 'Charlie', age: 16 },
    { name: 'David', age: 18 },
    { name: 'Eve', age: 22 },
    { name: 'Frank', age: 15 },
    { name: 'Grace', age: 19 },
    { name: 'Hank', age: 21 },
    { name: 'Ivy', age: 17 },
    { name: 'Jack', age: 18 }
    ];
console.log(users.filter(user=>user.age>=18))


17.
const users = [
    { name: 'Alice', age: 21 },
    { name: 'Bob', age: 22 },
    { name: 'Charlie', age: 21 },
    { name: 'David', age: 22 },
    { name: 'Eve', age: 23 },
    { name: 'Frank', age: 21 },
    { name: 'Grace', age: 23 },
    { name: 'Hank', age: 24 },
    { name: 'Ivy', age: 22 }
    ];
const groupedByage = users.reduce((acc,user)=> {
    if(!acc[user.age]) {
        acc[user.age]=[]
    }
    acc[user.age].push(user.name);
    return acc;
},{})
console.log(groupedByage)

18.
import readline from "readline";
const r1 = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});
r1.question(`Enter fruit (["strawberry", "grapes", "banana", "apple"]) : `,(fruit) => {
    r1.question(`Enter liquid ("water", "ice") : `, (liquid) => {
      r1.question(`Enter holder (["cone", "cup", "stick"]) : `, (holder) => {
        r1.question(`Enter topppings(["chocolate", "peanuts"]) : `,(toppings) => {
            console.log("Produciton started");
            console.log("Fruit added");
            setTimeout(() => {
              console.log("Fruit chopped");
              setTimeout(() => {
                console.log("liguid added");
                setTimeout(() => {
                    console.log("Machine started");
                    setTimeout(()=> {
                        console.log("Ice cream is placed in the holder.");
                        setTimeout(()=> {
                            console.log("Topping is added.");
                            setTimeout(()=> {
                                console.log(`your ${fruit} Icecream with ${liquid} and toppings ${toppings} added on top`);
                                r1.close();
                            },2000)
                        },3000)
                    },2000)
                },2000);
              },1000);
            },1000);
        });
        });
    
});
  }
);


21.
import http from 'http'
import fs from 'fs'
import path from 'path'
const __dirname = path.resolve()
const server = http.createServer((req,res) => {
    let filepath = '';
    let status = 200;
    switch(req.url) {
        case '/':
        case '/home':
            filepath = path.join(__dirname,'index.html');
            break;
        case '/about':
            filepath = path.join(__dirname,'about.html');
            break;
        case '/contact':
            filepath = path.join(__dirname,'contact.html');
            break;
        default:
            filepath = path.join(__dirname,'404.html');
            status= 404;
            break;
    }
    fs.readFile(filepath,'utf-8',(err,data)=> {
        res.writeHead(status,{"content-type":"text/html"});
        res.end(data)
    })
}).listen(3000)

